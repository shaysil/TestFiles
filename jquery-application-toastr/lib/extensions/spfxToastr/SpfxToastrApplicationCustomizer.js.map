{"version":3,"sources":["extensions/spfxToastr/SpfxToastrApplicationCustomizer.ts"],"names":[],"mappings":"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","file":"extensions/spfxToastr/SpfxToastrApplicationCustomizer.js","sourcesContent":["import { override } from '@microsoft/decorators';\nimport { Log } from '@microsoft/sp-core-library';\nimport {\n  BaseApplicationCustomizer\n} from '@microsoft/sp-application-base';\n\nimport * as strings from 'SpfxToastrApplicationCustomizerStrings';\n\n//Needed to reference external CSS files\nimport { SPComponentLoader } from '@microsoft/sp-loader';\n\nimport * as $ from 'jquery';\nimport * as toastr from 'toastr';\nimport styles from './SpfxToastr.module.scss';\n//import { IToast, ToastService } from '../../services/toastService'; //loaded from the toastService barrel - temporarily disabled due to issue with WebPack\nimport { IToast } from '../../services/toastService/IToast';\nimport { ToastService } from '../../services/toastService/ToastService';\n\nconst LOG_SOURCE: string = 'SpfxToastrApplicationCustomizer';\n\n/**\n * If your command set uses the ClientSideComponentProperties JSON input,\n * it will be deserialized into the BaseExtension.properties object.\n * You can define an interface to describe it.\n */\nexport interface ISpfxToastrApplicationCustomizerProperties {\n  //Nope\n}\n\n/** A Custom Action which can be run during execution of a Client Side Application */\nexport default class SpfxToastrApplicationCustomizer\n  extends BaseApplicationCustomizer<ISpfxToastrApplicationCustomizerProperties> {\n\n  private toastsPromise: Promise<IToast[]>;\n\n  @override\n  public onInit(): Promise<void> {\n    Log.info(LOG_SOURCE, `Initialized ${strings.Title}`);\n    \n    //Load the Toastr CSS\n    SPComponentLoader.loadCss('https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css');\n\n    //Go ahead and request the toasts, but we can't use them until jQuery and Toastr are ready\n    this.toastsPromise = ToastService.getToasts(this.context.spHttpClient, this.context.pageContext.web.absoluteUrl, this.context.pageContext.web.id);\n\n   \n    //jQuery document ready\n    $(document).ready(() => {\n\n      //***********************\n      //Toastr Options\n      //***********************\n\n      //Determines where the toast shows up.\n      // styles.topRight and styles.topLeft take into account the SuiteBar\n      // there are also the native toast-bottom-right and toast-bottom-left\n      toastr.options.positionClass = `${styles.topRight} ${styles.spfxToastr}`;\n      toastr.options.preventDuplicates = true;\n      toastr.options.newestOnTop = false; //Ensures the first toast we send is on top\n      toastr.options.timeOut = 0; //Prevents auto dismissal\n      toastr.options.extendedTimeOut = 0; //Prevents auto dismissal during hover\n      toastr.options.tapToDismiss = true; //Allows messages to go away on click\n      toastr.options.closeButton = true; //Shows a close button to let end users know to click to close\n\n      //A combination of Office UI-Fabric classes and custom classes are used\n      // to ensure the notifications don't look too out of place\n      //We use a custom styles.fabricIcon style to imitage the ms-Icon class\n      // the ms-Icon class has extra properties that mess up our toast\n      //We are unable to use the ms-bgColor styles since the Toast CSS loads\n      // later and takes precedence, so we use our own color classes\n      // For more background on this issue, see this article: https://dev.office.com/sharepoint/docs/spfx/web-parts/guidance/office-ui-fabric-integration\n      toastr.options.titleClass = 'ms-font-m ms-fontWeight-semibold';\n      toastr.options.messageClass = 'ms-font-s';\n      toastr.options.iconClasses = {\n        info: `${styles.info} ${styles.fabricIcon} ms-Icon--Info`,\n        warning: `${styles.warning} ${styles.fabricIcon} ms-Icon--Warning`,\n        error: `${styles.error} ${styles.fabricIcon} ms-Icon--Error`,\n        success: `${styles.success} ${styles.fabricIcon} ms-Icon--Completed`\n      };\n\n\n      //***********************\n      //Toast Display\n      //***********************\n\n      this.toastsPromise.then((toasts: IToast[]) => {\n        for (let t of toasts){\n          //Setup callbacks to track dismisal status\n          let overrides: ToastrOptions = {\n            onclick: () => {\n              ToastService.acknowledgeToast(t.Id, this.context.pageContext.web.id);\n            },\n            onCloseClick: () => {\n              ToastService.acknowledgeToast(t.Id, this.context.pageContext.web.id);\n            }\n          };\n          console.log(t.Demo);\n          console.log(t.Demo['Description']);\n          \n          switch (t.Severity){\n            \n            case 'Warning':\n            if(t.Demo!=null){\n              toastr.warning(t.Message+\n                `<input type=\"button\" onclick=\"location.href='${t.Demo[\"Url\"]}';\" value=\"${t.Demo[\"Description\"]}\" />`\n                , t.Title, overrides);\n            }else{\n              toastr.warning(t.Message, t.Title, overrides);\n            }\n              \n              break;\n            case 'Error':\n            if(t.Demo!=null){\n              toastr.error(t.Message+\n                `<input type=\"button\" onclick=\"location.href='${t.Demo[\"Url\"]}';\" value=\"${t.Demo[\"Description\"]}\" />`\n                , t.Title, overrides);\n            }else{\n              toastr.error(t.Message, t.Title, overrides);\n            }\n              \n              break;\n            case 'Success':\n              toastr.success(t.Message+\n                `<input type=\"button\" onclick=\"location.href='${t.Demo[\"Url\"]}';\" value=\"${t.Demo[\"Description\"]}\" />`\n                , t.Title, overrides);\n              break;\n            default:\n              toastr.info(t.Message+\n                `<input type=\"button\" onclick=\"location.href='${t.Demo[\"Url\"]}';\" value=\"${t.Demo[\"Description\"]}\" />`\n                , t.Title, overrides);\n              break;\n          }\n        }\n      }).catch((error: any): void => {\n        //Generic error handler for any issues that occurred throughout\n        // the promise chain. Display it in a toast!\n        toastr.error(error, strings.FailedToLoad);\n      });\n    });\n    \n    return Promise.resolve<void>();\n  }\n\n}\n"],"sourceRoot":"..\\..\\..\\src"}